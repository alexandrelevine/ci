#!/bin/bash

fmy_file="${BASH_SOURCE[0]}"
fmy_dir="$(dirname $fmy_file)"

jver="$(juju --version | cut -d . -f 1)"
if [[ $jver != '2' ]] ; then
  echo "ERROR: Juju version 2 is only supported"
  exit 127
fi

function juju-status() {
  timeout -s 9 30 juju status $juju_model_arg --format yaml $@
}

function juju-status-json() {
  timeout -s 9 30 juju status $juju_model_arg --format json $@
}

function juju-status-tabular() {
  timeout -s 9 30 juju status $juju_model_arg --format tabular $@
}

function juju-machines-tabular() {
  timeout -s 9 30 juju machines $juju_model_arg --format tabular $@
}

function juju-deploy() {
  juju deploy $juju_model_arg "$@"
}

function juju-add-unit () {
  juju add-unit $juju_model_arg "$@"
}

function juju-expose () {
  juju expose $juju_model_arg "$@"
}

function juju-add-relation () {
  juju add-relation $juju_model_arg "$@"
}

function juju-ssh () {
  juju ssh $juju_model_arg "$@"
}

function juju-scp () {
  juju scp $juju_model_arg "$@"
}

function juju-add-machine () {
  juju add-machine $juju_model_arg "$@"
}

function juju-remove-machine () {
  juju remove-machine $juju_model_arg "$@"
}

function juju-set() {
  juju config $juju_model_arg "$@"
}

function juju-get() {
  local value=`juju config $juju_model_arg $1 | grep -v "^      " | grep -A 4 " $2:"`
  if echo "$value" | grep -q "value:" ; then
    echo "$value" | grep "value:" | awk '{print $2}'
  else
    echo "$value" | grep "default:" | awk '{print $2}'
  fi
}

function get_machine_ip() {
  local service=$1
  juju status $juju_model_arg $service --format tabular | grep "$service/" | head -1 | awk '{print $5}'
}

function get_machine_by_ip() {
  local ip=$1
  juju machines $juju_model_arg | grep $ip | awk '{print $1}'
}

function wait_absence_status_for_services() {
  sleep 10
  check_str=$1
  local max_iter=${2:-30}
  # waiting for services
  local iter=0
  while juju-status | grep -P $check_str &>/dev/null
  do
    echo "Waiting for all service to be active - $iter/$max_iter"
    if ((iter >= max_iter)); then
      echo "ERROR: Services didn't up."
      juju-status-tabular
      return 1
    fi
    if juju-status | grep "current" | grep error ; then
      echo "ERROR: Some services went to error state"
      juju-status-tabular
      return 1
    fi
    local merr=`juju-status-json | python -c "import sys; import json; ms = json.load(sys.stdin)['machines']; [sys.stdout.write(str(m) + '\n') for m in ms if (ms[m]['juju-status']['current'] == 'down' and ms[m]['instance-id'] == 'pending')]"`
    if [ -n "$merr" ] ; then
      echo "ERROR: Machines went to down state: "$merr
      juju-status
      return 1
    fi
    sleep 30
    ((++iter))
  done
}

function wait_for_machines() {
  # wait for machines
  sleep 30
  for machine in $@ ; do
    echo "Waiting for machine: $machine"
    local fail=0
    while ! output=`juju-ssh $machine "sudo apt-get install -fy joe mc" 2>/dev/null` ; do
      if ((fail >= 60)); then
        echo "ERROR: Machine $machine did not up."
        echo $output
        return 1
      fi
      sleep 10
      ((++fail))
      if echo "$machine" | grep -q '/lxd/' ; then
        # lxd container case
        local mch=`echo "$machine" | cut -d '/' -f 1`
        local status=`juju-status-json | python -c "import sys; import json; sys.stdout.write(json.load(sys.stdin)['machines']['$mch']['containers']['$machine']['juju-status']['current'])"`
        local iid=`juju-status-json | python -c "import sys; import json; sys.stdout.write(json.load(sys.stdin)['machines']['$mch']['containers']['$machine']['instance-id'])"`
      else
        local status=`juju-status-json | python -c "import sys; import json; sys.stdout.write(json.load(sys.stdin)['machines']['$machine']['juju-status']['current'])"`
        local iid=`juju-status-json | python -c "import sys; import json; sys.stdout.write(json.load(sys.stdin)['machines']['$machine']['instance-id'])"`
      fi
      if [[ "$status" == "down" && "$iid" == "pending" ]] ; then
        echo "ERROR: Machine $machine went to 'down' state."
        juju-status
        return 1
      fi
    done
    while ! juju-ssh $machine uname -a 2>/dev/null ; do
      echo "WARNING: Machine $machine isn't accessible"
      sleep 2
    done
  done
}

function wait_for_all_machines() {
  wait_for_machines `juju-machines-tabular | tail -n +2 | awk '{print $1}'`
}

function create_stackrc() {
  local auth_ip=`get_machine_ip keystone`
  local proto="http"
  local kver=`juju-get keystone preferred-api-version`
  echo "INFO: detected keystone version is $kver"
  echo "# created by CI" > $WORKSPACE/stackrc
  if [[ "$kver" == '3' ]] ; then
    echo "export OS_AUTH_URL=$proto://$auth_ip:5000/v3" >> $WORKSPACE/stackrc
    echo "export OS_IDENTITY_API_VERSION=3" >> $WORKSPACE/stackrc
    echo "export OS_PROJECT_DOMAIN_NAME=admin_domain" >> $WORKSPACE/stackrc
    echo "export OS_USER_DOMAIN_NAME=admin_domain" >> $WORKSPACE/stackrc
  else
    echo "export OS_AUTH_URL=$proto://$auth_ip:5000/v2.0" >> $WORKSPACE/stackrc
    echo "export OS_IDENTITY_API_VERSION=2" >> $WORKSPACE/stackrc
  fi
  echo "export OS_USERNAME=admin" >> $WORKSPACE/stackrc
  echo "export OS_TENANT_NAME=admin" >> $WORKSPACE/stackrc
  echo "export OS_PROJECT_NAME=admin" >> $WORKSPACE/stackrc
  echo "export OS_PASSWORD=$PASSWORD" >> $WORKSPACE/stackrc
}

function post_deploy() {
  echo "INFO: Waiting for services start: $(date)"

  if ! wait_absence_status_for_services "executing|blocked|waiting" 45 ; then
    echo "ERROR: Waiting for services end: $(date)"
    return 1
  fi
  echo "INFO: Waiting for services end: $(date)"

  # check for errors
  if juju-status | grep "current" | grep error ; then
    echo "ERROR: Some services went to error state"
    return 1
  fi

  juju-status-tabular
}

function configure_l3_routing() {
  # configures compute/network node for 'disconnected' DVR/HA scheme
  local mch=$1

  # enable forwarding
  juju-ssh $mch "sudo sysctl -w net.ipv4.ip_forward=1"
  # assign gateway of public network to br-ex (OVSBridge)
  juju-ssh $mch "sudo ip link set up dev $brex_iface ; sudo ip addr add $public_network_addr.1/32 broadcast $public_network_addr.1 dev $brex_iface"
  # add route for public CIDR to virtual zone
  juju-ssh $mch "sudo ip route add $public_network_addr.0/24 dev $brex_iface"
  # add route for all traffic from virtual zone to host's default gateway
  juju-ssh $mch "sudo ip rule add from all iif $brex_iface pref 10 table 120 ; sudo ip route add 0.0.0.0/0 table 120 via $addr.1 dev $IF1"

  # copy & install neutron_router_helper
  tmpf=$(mktemp)
  cp $my_dir/files/neutron-router-helper.yaml $tmpf
  sed -i -e "s/{{public_iface}}/$brex_iface/g" $tmpf
  sed -i -e "s|{{public_cidr}}|$public_network_addr.0/24|g" $tmpf
  sed -i -e "s/{{public_gateway}}/$public_network_addr.1/g" $tmpf
  juju-scp $HOME/neutron-router-helper.tgz $mch:
  juju-scp $tmpf $mch:neutron-router-helper.yaml
  juju-ssh $mch "tar -xf neutron-router-helper.tgz ; cd neutron-router-helper-master ; sudo PBR_VERSION='0.1.0' python setup.py install --install-scripts=/usr/local/bin &>/dev/null"
  juju-ssh $mch "sudo mv neutron-router-helper.yaml /etc/neutron/neutron-router-helper.yaml"
  juju-ssh $mch "sudo systemctl daemon-reload ; sudo systemctl start neutron-router-helper.timer ; sudo systemctl restart rsyslog"
}

function _install_dr() {
  juju-scp $HOME/neutron-dynamic-routing.tgz $mch:
  juju-ssh $mch "tar -xf neutron-dynamic-routing.tgz ; cd neutron-dynamic-routing ; git checkout 30a9f0b ; sudo python setup.py install --install-scripts=/usr/bin --install-data=/ &>/dev/null"
}

function _run_dr_agent() {
  local mch=$1
  local ip=$2

  local ftmp=$(mktemp)
  cat <<EOS >$ftmp
[DEFAULT]
verbose=True
debug=False
[BGP]
bgp_speaker_driver = neutron_dynamic_routing.services.bgp.agent.driver.ryu.driver.RyuBgpDriver
bgp_router_id = $ip
EOS
  juju-scp $ftmp $mch:bgp_dragent.ini
  juju-scp $my_dir/files/neutron-bgp-dragent.service $mch:neutron-bgp-dragent.service
  juju-ssh $mch "sudo mkdir -p /usr/lib/systemd/system ; sudo cp ./neutron-bgp-dragent.service /usr/lib/systemd/system/neutron-bgp-dragent.service"
  juju-ssh $mch "sudo cp ./bgp_dragent.ini /etc/neutron/bgp_dragent.ini ; sudo chmod 644 /etc/neutron/bgp_dragent.ini ; sudo systemctl start neutron-bgp-dragent.service"
}

function configure_bgp_neutron_api() {
  local mch="neutron-api/0"
  _install_dr $mch

  # run dr agent
  local ip=`juju-ssh $mch "hostname -i" 2>/dev/null`
  _run_dr_agent $mch $ip

  # configure dr plugin
  local path='/usr/local/lib/python2.7/dist-packages/neutron_dynamic_routing/db/migration/alembic_migrations/versions/'
  juju-ssh $mch "sudo mv $path/pike/expand/* $path/newton/expand/"
  juju-ssh $mch "sudo neutron-db-manage upgrade heads"
  juju-set neutron-api "manage-neutron-plugin-legacy-mode=False"
}

function configure_bgp_agent() {
  local mch=$1
  local ip=$2

  _install_dr $mch
  _run_dr_agent $mch $ip
}

function create_adv_ip() {
  local host=$1
  local ip=$2

  juju-ssh neutron-api/0 "sudo neutron-bgp-manage-adv-ip create --ip $ip --adv-host $host"
}
